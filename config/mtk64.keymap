#include "keycode_japanese.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <800>;
};

/ {
    macros {
        layer0_f13: trasn_f13 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp F13>;
            label = "TRASN_F13";
        };

        layer1_f14: layer1_f14 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp F14>;
            label = "LAYER1_F14";
        };

        layer2_f15: layer2_f20 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2 &kp F15>;
            label = "LAYER2_F20";
        };

        layer3_f16: layer3_f16 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3 &kp F16>;
            label = "LAYER3_F16";
        };

        layer4_f17: layer4_f17 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &kp F17>;
            label = "LAYER4_F17";
        };

        layer5_f18: layer5_f18 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 5 &kp F18>;
            label = "LAYER5_F18";
        };

        layer6_f19: layer6_f19 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 6 &kp F19>;
            label = "LAYER6_F19";
        };

        Length1: Length1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(NUMBER_1)))>;
            label = "LENGTH1";
        };

        Length2: Length2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(NUMBER_2)))>;
            label = "LENGTH2";
        };

        Length4: Length4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(NUMBER_4)))>;
            label = "LENGTH4";
        };

        Length8: Length8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(N8)))>;
            label = "LENGTH8";
        };

        Length16: Length16 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(NUMBER_6)))>;
            label = "LENGTH16";
        };

        Length32: Length32 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(NUMBER_3)))>;
            label = "LENGTH32";
        };

        TripletOn: TripletOn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LG(F3)))>;
            label = "TRIPLETON";
        };

        CtrlAltDelete: CtrlAltDelete {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(DELETE))>;
            label = "CTRLALTDELETE";
        };

        InputChange: InputChange {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "INPUTCHANGE";
        };

        InputChangeMac: InputChangeMac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "INPUTCHANGEMAC";
        };

        Input_Bracket: Input_Bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "INPUT_BRACKET";
        };
    };

    behaviors {
        layer0kp: layer0kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER0KP";
            bindings = <&layer0_f13>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        layer1kp: layer1kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER1KP";
            bindings = <&layer1_f14>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        layer2kp: layer2kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER2KP";
            bindings = <&layer2_f15>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        layer3kp: layer3kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER3KP";
            bindings = <&layer3_f16>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        layer4kp: layer4kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER4KP";
            bindings = <&layer4_f17>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        layer5kp: layer5kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER5KP";
            bindings = <&layer5_f18>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        layer6kp: layer6kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER6KP";
            bindings = <&layer6_f19>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <750>;
        };

        inc_dec_msc: inc_dec_msc {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "INC_DEC_MSC";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
        };

        mkp_kp: mkp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MKP_KP";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Length1kp: Length1kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LENGTH1KP";
            bindings = <&Length1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Length2kp: Length2kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LENGTH2KP";
            bindings = <&Length2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Length4kp: Length4kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LENGTH4KP";
            bindings = <&Length4>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Length8kp: Length8kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LENGTH8KP";
            bindings = <&Length8>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Length16kp: Length16kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LENGTH16KP";
            bindings = <&Length16>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Length32kp: Length32kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LENGTH32KP";
            bindings = <&Length32>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        Triplet_kp: Triplet_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TRIPLET_KP";
            bindings = <&Length32>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CAD {
            bindings = <&CtrlAltDelete>;
            key-positions = <25 39 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Windows {
            bindings = <
&layer0kp 0 GRAVE  &layer1kp 0 NUMBER_1  &layer2kp 0 NUMBER_2  &layer3kp 0 NUMBER_3  &layer4kp 0 NUMBER_4  &layer5kp 0 NUMBER_5  &layer6kp 0 NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &kp BACKSPACE  &kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp SQT  &kp LCTRL  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMICOLON  &kp EQUAL  &kp LSHFT  &mt LC(Z) Z  &mt LC(X) X  &mt LC(C) C  &mt LC(V) V  &kp B  &kp AT_SIGN  &kp MINUS  &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp BACKSLASH  &kp LALT  &kp LGUI  &mkp MB1  &mkp MB2  &kp SPACE  &kp ENTER  &Input_Bracket  &kp DELETE  &layer1_f14  &layer6_f19  &InputChange  &kp ESCAPE  &none  &none  &mo 5  &mo 5  &mo 6  &kp LEFT_SHIFT  &mo 5  &mo 6  &kp LEFT_SHIFT  &mo 5  &mo 6  &kp LEFT_SHIFT  &mo 5
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>,
                <&inc_dec_kp LC(LS(EQUAL)) LC(MINUS)>;
        };

        Nuendo {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none  &mo 0  &mo 0  &trans  &trans  &mo 0  &trans  &trans  &mo 0  &trans  &trans  &mo 0
            >;

            sensor-bindings = <&inc_dec_kp LS(H) LS(G)>, <&inc_dec_kp H G>;
        };

        Mac {
            bindings = <
&layer0kp 0 GRAVE  &layer1kp 0 NUMBER_1  &layer2kp 0 NUMBER_2  &layer3kp 0 NUMBER_3  &layer4kp 0 NUMBER_4  &layer5kp 0 NUMBER_5  &layer6kp 0 NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &kp BACKSPACE  &kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp SQT  &kp LCTRL  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMICOLON  &kp EQUAL  &kp LSHFT  &mt LG(Z) Z  &mt LG(X) X  &mt LG(C) C  &mt LG(V) V  &kp B  &kp AT_SIGN  &kp MINUS  &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp BACKSLASH  &kp LALT  &kp LGUI  &mkp MB1  &mkp MB2  &kp SPACE  &kp ENTER  &Input_Bracket  &kp DELETE  &layer3_f16  &layer6_f19  &InputChangeMac  &kp ESC  &none  &none  &mo 5  &mo 5  &mo 6  &kp LEFT_SHIFT  &mo 5  &mo 6  &kp LEFT_SHIFT  &mo 5  &mo 6  &kp LEFT_SHIFT  &mo 5
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT_ARROW LEFT_ARROW>,
                <&inc_dec_kp LG(LS(EQUAL)) LG(MINUS)>;
        };

        studio_one {
            bindings = <
&layer0kp 0 GRAVE  &layer1kp 0 F1  &layer2kp 0 F2  &layer3kp 0 F3  &layer4kp 0 F4  &layer5kp 0 F5  &layer6kp 0 F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp BACKSPACE  &kp TAB  &mt LS(Q) Q  &kp W  &mt LG(LS(E)) LG(E)  &kp R  &kp T  &Length1kp 0 Y  &Length2kp 0 U  &Length4kp 0 I  &Length8kp 0 O  &Length16kp 0 P  &Length32kp 0 SLASH  &kp LCTRL  &mt A LG(A)  &mt LG(S) S  &kp D  &kp F  &kp G  &mt LC(LS(LG(H))) LS(LA(LC(H)))  &mt NUMBER_5 NUMBER_1  &mt NUMBER_6 NUMBER_2  &mt NUMBER_7 NUMBER_3  &mt NUMBER_9 NUMBER_4  &Triplet_kp 0 LA(LC(LG(O)))  &kp LSHFT  &mt LG(Y) LG(Z)  &kp X  &kp LG(C)  &mt LC(LS(LA(V))) LG(V)  &kp LC(LA(LS(B)))  &mt LA(LG(KP_NUMBER_3)) LA(LG(KP_NUMBER_4))  &kp MINUS  &kp LA(N)  &mkp LCLK  &mkp MCLK  &mkp RCLK  &kp LA(LS(LG(I)))  &kp LS(LA(LG(O)))  &kp LALT  &kp LGUI  &mt M LS(M)  &mkp MB2  &kp SPACE  &kp ENTER  &kp LS(LC(LG(LEFT_ARROW)))  &mt LS(LC(F1)) LS(LC(LG(RIGHT_ARROW)))  &layer2_f15  &trans  &kp F3  &kp KP_NUMBER_1  &none  &none  &mo 5  &mo 2  &kp KP_NUMBER_1  &kp SPACE  &mo 2  &kp KP_NUMBER_1  &kp SPACE  &mo 2  &kp KP_NUMBER_1  &kp SPACE  &mo 2
            >;

            sensor-bindings = <&inc_dec_kp LS(W) LS(E)>, <&inc_dec_kp W E>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none  &trans  &trans  &trans  &trans  &mo 2  &trans  &trans  &mo 2  &trans  &trans  &mo 2
            >;

            sensor-bindings = <
                &inc_dec_kp LEFT_ARROW RIGHT_ARROW
                &inc_dec_kp UP_ARROW   DOWN_ARROW
            >;
        };

        NumberPad {
            bindings = <
&trans  &layer1kp 0 F1  &layer2kp 0 F2  &layer3kp 0 F3  &layer4kp 0 F4  &layer5kp 0 F5  &layer6kp 0 F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &trans  &trans  &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &trans  &kp KP_MINUS  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE  &kp F12  &trans  &trans  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &trans  &kp KP_PLUS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_ASTERISK  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp KP_EQUAL  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Setting {
            bindings = <
&layer0_f13  &layer1_f14  &layer2_f15  &layer3_f16  &layer4_f17  &layer5_f18  &layer6_f19  &trans  &trans  &trans  &trans  &studio_unlock  &kp TAB  &kp Q  &kp W  &kp E  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR  &kp LEFT_CONTROL  &kp A  &kp S  &kp D  &trans  &trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(DEL))  &mkp MB4  &mkp MB5  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans  &kp LEFT_ALT  &kp LEFT_GUI  &trans  &trans  &trans  &trans  &trans  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
